const express = require('express');
const router =  express.Router();
const User = require('../models/User')
const { body, validationResult } = require('express-validator');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const fetchuser = require('../middleware/fetchuser');

const JWT_TOKEN = process.env.JWT_TOKEN;

// create a user using: POST "/api/auth/createUser". No logic required 


router.post('/signup', [
  // adding an Array for validation
    body('name', 'Enter a valid Name').isLength({min:3}),
    body('email','Enter a valid Email').isEmail(),
    body('password','Enter a valid Password').isLength({min:5}),
], async (req, res)=>{
  let success = false;
    // If there are errors return bad request and the errors 
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({success, errors: errors.array() });
    }
    
    try {
        
    // check wether the user with this email exists in our database or not 
    let user = await User.findOne({email:req.body.email})
    if(user){
        return res.status(400).json({success, error:"Sorry user with this email already exists"})
    }

    // hashing user password to make it secure, the password will be stored in form of a hash generated by below two line and not in plane text. 
    const salt = await bcrypt.genSalt(10);
    const hashPass = await bcrypt.hash(req.body.password, salt);

    // create a new user 
    user = await User.create({
        name: req.body.name,
        email: req.body.email,
        password: hashPass
      });
    
    const data = {
      user:{
        id:user.id
      }
    }
    success = true;
    const authToken = jwt.sign(data, JWT_TOKEN);
    res.json({success, authToken});
    // res.json({"authToken":authToken});   the above line can also be written like this, both means the same.
    // console.log(authToken);
    
    } catch (error) {
            console.error(error.message);
            res.status(500).send("some error occurred");
    }  
    //   .then & .catch not used while await is used 
    //   .then(user => res.json(user))
    //   .catch(err=>{
    //     console.log(err)
    //     res.json({error:'Please enter a unique value for email', message: err.message})
    //   })
      
})

// Authenticate a user using: POST "/api/auth/login". No logic required 
router.post('/login', [
  body('email','Enter a valid Email').isEmail(),
  body('password','Enter a valid Password').isLength({min:5}),
], async (req, res)=>{
  // If there are errors return bad request and the errors 
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    console.log("log in didn't work")
    return res.status(400).json({ errors: errors.array() });
  }

  const {email, password} = req.body;
  try {
    let success = false;
    let user = await User.findOne({email})
    if(!user){
      success = false;
      return res.status(400).json({success, error:"Please try to login using correct Credentials"})
    }
    const passwordComp = await bcrypt.compare(password, user.password)    //Internally checks for the hash and return true/false.
    if(!passwordComp){
      success = false;
      return res.status(400).json({success, error:"Please try to login using correct Credentials"});
    }

    const data = {
      user:{
        id:user.id
      }
    }
    success = true;
    const authToken = jwt.sign(data, JWT_TOKEN);
    res.json({success, authToken});
    

  } catch (error) {
    console.error(error.message);
    res.status(500).send("some error occurred");
}

});


// Get loggedin user details using: POST "/api/auth/getuser". Login required. 
// Using a middleware 'fetchuser' to validate info or data before proceding.
router.post('/getuser', fetchuser, async(req,res)=>{
  try {
    let userId = req.user.id;
    const user = await User.findById(userId).select("-password");
    // const user = await User.findById(userId).select("-password -name");        // "-key" will give all details except this key(will not give pass.)
    // const user = await User.findById(userId).select("password name");        // "key" will give details only of this key (gives name & pass. only)
    res.send(user);
    
  } catch (error) {
    console.error(error.message);
    res.status(500).send("some error occurred");
  }
})

module.exports = router;